<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Developer's Corner]]></title>
  <link href="http://www.developer-corner.com/atom.xml" rel="self"/>
  <link href="http://www.developer-corner.com/"/>
  <updated>2014-04-09T14:47:16+02:00</updated>
  <id>http://www.developer-corner.com/</id>
  <author>
    <name><![CDATA[Antonio Bello]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cloning Dijit Widgets]]></title>
    <link href="http://www.developer-corner.com/2011/06/cloning-dijit-widgets"/>
    <updated>2011-06-06T09:41:00+02:00</updated>
    <id>http://www.developer-corner.com/2011/06/cloning-dijit-widgets</id>
    <content type="html"><![CDATA[<p>Dojox and Dijit widgets are undoubtedly cool, bringing a richer user
experience to your web site.</p>

<p>One of their drawback though is that they are not easily cloneable. A typical
example is for instance a table with a set of controls per row and a “Add new
row” button, allowing to add a new row to the table.</p>

<p>This article provides a simple solution to clone a table row containing dijit
widgets.</p>

<!-- more -->


<h1>The problem</h1>

<p>I&rsquo;ve recently started using dojo and dijit to provide some cool user interface
experience on a project I am working on.</p>

<p>During implementation I&rsquo;ve faced with a problem: I have a table with a set of
widgets on each row, initially with a single row, but with the user able to
add as many rows as he needs. Unfortunately <em>there is no (native) way to clone
a dijit widget</em>, so I had to find a different solution.</p>

<p>I am using the declarative approach of creating dijit widgets, by adding some
dijit related attributes to input controls and let the dojo parser convert
them from normal input controls to dijit widgets. For instance, the following
input textbox:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;text&#39;</span> <span class="na">dojoType=</span><span class="s">&#39;dijit.form.ValidationTextBox&#39;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>is parsed by dojo and converted into a ValidationTextBox widget like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;div</span>
</span><span class='line'>    <span class="na">class=</span><span class="s">&quot;dijit dijitReset dijitInlineTable dijitLeft dijitTextBox dijitValidationTextBox&quot;</span>
</span><span class='line'>    <span class="na">id=</span><span class="s">&quot;widget_dijit_form_ValidationTextBox_0&quot;</span> <span class="na">role=</span><span class="s">&quot;presentation&quot;</span>
</span><span class='line'>    <span class="na">dir=</span><span class="s">&quot;ltr&quot;</span> <span class="na">widgetid=</span><span class="s">&quot;dijit_form_ValidationTextBox_0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;dijitReset dijitValidationContainer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span>
</span><span class='line'>            <span class="na">class=</span><span class="s">&quot;dijitReset dijitInputField dijitValidationIcon dijitValidationInner&quot;</span>
</span><span class='line'>            <span class="na">value=</span><span class="s">&quot;Χ&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">tabindex=</span><span class="s">&quot;-1&quot;</span> <span class="na">readonly=</span><span class="s">&quot;readonly&quot;</span>
</span><span class='line'>            <span class="na">role=</span><span class="s">&quot;presentation&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;dijitReset dijitInputField dijitInputContainer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;dijitReset dijitInputInner&quot;</span>
</span><span class='line'>            <span class="na">dojoattachpoint=</span><span class="s">&quot;textbox,focusNode&quot;</span> <span class="na">autocomplete=</span><span class="s">&quot;off&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span>
</span><span class='line'>            <span class="na">id=</span><span class="s">&quot;dijit_form_ValidationTextBox_0&quot;</span> <span class="na">tabindex=</span><span class="s">&quot;0&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Conversion from html control to dijit widget can be performed either
automatically, by specifying the <code>djconfig='parseOnLoad:true'</code> parameter when
loading the dojo script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script</span>
</span><span class='line'><span class="nt"> </span><span class="na">type=</span><span class="s">&#39;text/javascript&#39;</span>
</span><span class='line'>  <span class="na">src=</span><span class="s">&#39;https://ajax.googleapis.com/ajax/libs/dojo/1.6.0/dojo/dojo.xd.js&#39;</span>
</span><span class='line'>  <span class="na">djconfig=</span><span class="s">&#39;parseOnLoad:true&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>or manually, by calling the <code>dojo.parser.parse()</code> function, most likely in <code>addOnLoad()</code>.</p>

<h1>The solution</h1>

<p>The idea behind the solution I’ve found out can be summarized as follows:</p>

<ol>
<li> read the table row <strong>before</strong> conversion from input control to dijit widget occurs and save its html code in a safe place</li>
<li> reuse the table row as a template to clone new table rows, and apply the dojo parsing on it for input to widget conversions</li>
</ol>


<p>In order to work, row cloning must be done <em>before</em> the dojo parsing occurs.</p>

<p>This is the raw html form we’ll work on:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;form</span> <span class="na">dojoType=</span><span class="s">&#39;dijit.form.Form&#39;</span> <span class="na">id=</span><span class="s">&#39;form&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;hidden&#39;</span> <span class="na">value=</span><span class="s">&#39;1&#39;</span> <span class="na">id=</span><span class="s">&#39;hRowsCounter&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;button&#39;</span> <span class="na">id=</span><span class="s">&#39;btnAddNewRow&#39;</span> <span class="na">value=</span><span class="s">&#39;Add new row&#39;</span>  <span class="na">label=</span><span class="s">&#39;Add new row&#39;</span> <span class="na">dojoType=</span><span class="s">&#39;dijit.form.Button&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;table</span> <span class="na">id=</span><span class="s">&#39;table&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>            <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span>Quantity<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;</span>Unit Price<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>            <span class="nt">&lt;tr</span> <span class="na">id=</span><span class="s">&quot;row-1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&#39;text&#39;</span>  <span class="na">id=</span><span class="s">&#39;editQuantity1&#39;</span> <span class="na">dojoType=</span><span class="s">&#39;dijit.form.NumberSpinner&#39;</span> <span class="na">required=</span><span class="s">&#39;true&#39;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>                <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">type=</span><span class="s">&#39;text&#39;</span>  <span class="na">id=</span><span class="s">&#39;editUnitPrice1&#39;</span> <span class="na">dojoType=</span><span class="s">&#39;dijit.form.CurrencyTextBox&#39;</span> <span class="na">required=</span><span class="s">&#39;true&#39;</span> <span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;submit&#39;</span> <span class="na">value=</span><span class="s">&#39;Submit&#39;</span> <span class="na">label=</span><span class="s">&#39;Submit&#39;</span> <span class="na">dojoType=</span><span class="s">&#39;dijit.form.Button&#39;</span>  <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The hidden field is used to keep track of the total number of rows, used both locally to generate the identifiers of the cloned controls and at server side, to let the web application know in advance how many rows to process.</p>

<p>The table row is made up of 2 dijit widgets, <code>NumberSpinner</code> and <code>CurrencyTextBox</code>,  but of course the same principle applies to any other dijit or dojox widget.</p>

<p>This form “as is” is rendered by the browser as a standard html form, not powered by dijit yet, and it should look like the following:</p>

<p><img src="http://www.developer-corner.com/res/images/2011-06-06-cloning-dijit-widgets/standard_html_form.png" alt="Standard form" /></p>

<p>In order to perform the enhancement, we need some javascript code. First of all, we need to load the dojo library in the <code>&lt;head&gt;</code> section, along with jquery, which I’m going to use as I feel more familiar with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script</span>
</span><span class='line'>        <span class="na">type=</span><span class="s">&#39;text/javascript&#39;</span> <span class="na">src=</span><span class="s">&#39;https://ajax.googleapis.com/ajax/libs/dojo/1.6.0/dojo/dojo.xd.js&#39;</span>
</span><span class='line'>        <span class="na">djconfig=</span><span class="s">&#39;parseOnLoad:false&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script</span>
</span><span class='line'>        <span class="na">type=</span><span class="s">&#39;text/javascript&#39;</span>
</span><span class='line'>        <span class="na">src=</span><span class="s">&#39;http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the <code>parseOnLoad</code> parameter explicitly set to false, to prevent automatic dojo parsing of the body, precondition needed for the solution to work. Following the javascript code to enhance the standard html form into a widget based dijit form.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text/javascript&#39;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nx">dojo</span><span class="p">.</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;dijit.form.Form&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">dojo</span><span class="p">.</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;dijit.form.Button&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">dojo</span><span class="p">.</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;dijit.form.CurrencyTextBox&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">dojo</span><span class="p">.</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;dijit.form.NumberSpinner&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">dojo</span><span class="p">.</span><span class="nx">addOnLoad</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Parse the body to convert input controls into dojox/dijit widgets</span>
</span><span class='line'>        <span class="nx">dojo</span><span class="p">.</span><span class="nx">parser</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">dojo</span><span class="p">.</span><span class="nx">body</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">dojo</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">dijit</span><span class="p">.</span><span class="nx">byId</span><span class="p">(</span><span class="s1">&#39;btnSubmit&#39;</span><span class="p">),</span> <span class="s1">&#39;onClick&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">dijit</span><span class="p">.</span><span class="nx">byId</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">).</span><span class="nx">submit</span><span class="p">();</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">dojo</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">dijit</span><span class="p">.</span><span class="nx">byId</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">),</span> <span class="s1">&#39;onSubmit&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">validate</span><span class="p">();</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After adding the above code to our page, the form is now visibly different:</p>

<p><img src="http://www.developer-corner.com/res/images/2011-06-06-cloning-dijit-widgets/enhanced_form.png" alt="Enhanced form" /></p>

<p>The final step is to implement the row addition. First we need to save the row template in the addOnLoad() event, prior to dojo parsing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">rowTemplate</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">dojo</span><span class="p">.</span><span class="nx">addOnLoad</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Save the row template</span>
</span><span class='line'>    <span class="nx">rowTemplate</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#row-1&#39;</span><span class="p">).</span><span class="nx">clone</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Parse the body to convert input controls into dojox/dijit widgets</span>
</span><span class='line'>    <span class="nx">dojo</span><span class="p">.</span><span class="nx">parser</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">dojo</span><span class="p">.</span><span class="nx">body</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we have to attach a click handler to the “Add new row” button:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">rowTemplate</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">dojo</span><span class="p">.</span><span class="nx">addOnLoad</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Save the row template</span>
</span><span class='line'>    <span class="nx">rowTemplate</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#row-1&#39;</span><span class="p">).</span><span class="nx">clone</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Parse the body to convert input controls into dojox/dijit widgets</span>
</span><span class='line'>    <span class="nx">dojo</span><span class="p">.</span><span class="nx">parser</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">dojo</span><span class="p">.</span><span class="nx">body</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">dojo</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">dijit</span><span class="p">.</span><span class="nx">byId</span><span class="p">(</span><span class="s1">&#39;btnSubmit&#39;</span><span class="p">),</span> <span class="s1">&#39;onClick&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">dijit</span><span class="p">.</span><span class="nx">byId</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">).</span><span class="nx">submit</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">dojo</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">dijit</span><span class="p">.</span><span class="nx">byId</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">),</span> <span class="s1">&#39;onSubmit&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">validate</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">dojo</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">dijit</span><span class="p">.</span><span class="nx">byId</span><span class="p">(</span><span class="s1">&#39;btnAddNewRow&#39;</span><span class="p">),</span> <span class="s1">&#39;onClick&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">addTableRow</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Last, the missing piece is the actual addTableRow() implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">addTableRow</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Retrieve the rows counter hidden control</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">hRowsCounter</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#hRowsCounter&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Calculate the next row index</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">hRowsCounter</span><span class="p">.</span><span class="nx">val</span><span class="p">())</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set the new row id</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">newRowId</span> <span class="o">=</span> <span class="s1">&#39;row-&#39;</span> <span class="o">+</span> <span class="nx">index</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Clone the table row from the previously saved template</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">newRow</span> <span class="o">=</span> <span class="nx">rowTemplate</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="nx">newRowId</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Replace the id of each input control</span>
</span><span class='line'>    <span class="nx">newRow</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">newId</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[\d]+$/g</span><span class="p">,</span> <span class="nx">index</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="nx">newId</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="nx">newId</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">end</span><span class="p">().</span><span class="nx">appendTo</span><span class="p">(</span><span class="s1">&#39;#table&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Update the number of rows</span>
</span><span class='line'>    <span class="nx">hRowsCounter</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Force a dojo parsing of hte newly created row </span>
</span><span class='line'>    <span class="nx">dojo</span><span class="p">.</span><span class="nx">parser</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">dojo</span><span class="p">.</span><span class="nx">byId</span><span class="p">(</span><span class="nx">newRowId</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The actual row cloning is done at line 12, with contextual update of the row
id.</p>

<p>Lines 15 to 20 are used to locate all <code>&lt;input&gt;</code> controls in the newly created
row and for each one:</p>

<ul>
<li>calculate a unique control id (line 16)</li>
<li>reset the control value (line 17)</li>
<li>set the new control id (line 18)</li>
<li>set the control name (line 19)</li>
</ul>


<p>The new control id is calculated by replacing the ending numbers in the
control id with the row number, using a regular expression. If you look at the
html form code, you’ll see that each control in the table has an id made up of
a descriptive text (editQuantity) and a number, identifying the row. The
regular expression locates the ending number, so it can be replaced with the
new row number. Needless to say, this process is required to ensure that each
control in the table has a unique id.</p>

<p>Here is the final form, with some rows manually added to the table:</p>

<p><img src="http://www.developer-corner.com/res/images/2011-06-06-cloning-dijit-widgets/enhanced_form_with_multiple_rows.png" alt="Enhanced form with multiple rows" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slow Build on Compact Framework Projects]]></title>
    <link href="http://www.developer-corner.com/2009/07/slow-build-on-compact-framework-projects"/>
    <updated>2009-07-28T05:05:00+02:00</updated>
    <id>http://www.developer-corner.com/2009/07/slow-build-on-compact-framework-projects</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been experiencing an extremely high build time on a windows mobile
project targeted to compact framework 2.0 before finding out what was
responsible of such slowness. Fortunately solving this problem is as easy as
adding a line to a configuration file.</p>

<!-- more -->


<p>The project is an order entry application targeted for compact framework 2.0.
As of now, it is a solution made up of 7 projects, 2 of which are executables
and the other ones are libraries. The first thing I noticed is that slowness
occurred on one project only: the data layer. I am using <a href="http://www.llblgen.com/">LLBLGen
Pro</a>, a powerful O/R mapper that simplifies data
layer development taking advantage of its visual designer and code generator.
The complete list of assemblies referenced by my project is shown below:</p>

<p><img src="http://www.developer-corner.com/res/images/2009-07-28-platform-verification-task/list_of_assemblies.png" alt="Project
References" /></p>

<p>I&rsquo;m not sure whether the slowness is caused by the LLBLGen Pro or either of
the System.Data.* assemblies, or maybe both. I just know that the same issue
happened on Windows XP, Vista 64, using either Visual Studio 2005 and 2008.
I&rsquo;ve just reinstalled Vista Ultimate on my T61p yesterday, and at the first
full build it took 30 to 60 seconds, whereas it should take just a few
seconds. Fortunately I already know how to solve this issue, but I hope anyone
having the same issue can find the solution here.</p>

<p>The most important hint came after enabling diagnostic build output (<em>Tools</em>
menu, <em>Options</em>, <em>Projects and Solutions</em>, <em>Build and Run</em>, <em>MSBuild project
build output verbosity</em> option). After setting this property to Diagnostic, on
next build I found the following statistics:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Task Performance Summary:
</span><span class='line'>        0 ms  RemoveDuplicates                           2 calls
</span><span class='line'>        0 ms  GetDeviceFrameworkPath                     1 calls
</span><span class='line'>        0 ms  Message                                    5 calls
</span><span class='line'>        0 ms  AssignCulture                              1 calls
</span><span class='line'>        0 ms  FindAppConfigFile                          1 calls
</span><span class='line'>        0 ms  AssignTargetPath                          10 calls
</span><span class='line'>        0 ms  MakeDir                                    1 calls
</span><span class='line'>        0 ms  ResolveNonMSBuildProjectOutput             1 calls
</span><span class='line'>        0 ms  GetFrameworkPath                           1 calls
</span><span class='line'>        0 ms  Delete                                     1 calls
</span><span class='line'>        1 ms  CreateProperty                             1 calls
</span><span class='line'>        1 ms  ConvertToAbsolutePath                      1 calls
</span><span class='line'>        1 ms  ReadLinesFromFile                          1 calls
</span><span class='line'>       12 ms  Copy                                       6 calls
</span><span class='line'>       20 ms  FindUnderPath                              5 calls
</span><span class='line'>       32 ms  Csc                                        1 calls
</span><span class='line'>       47 ms  MSBuild                                    3 calls
</span><span class='line'>      110 ms  ResolveAssemblyReference                   1 calls
</span><span class='line'>    18382 ms  PlatformVerificationTask                   1 calls
</span><span class='line'>
</span><span class='line'>Build succeeded.
</span><span class='line'>
</span><span class='line'>Time Elapsed 00:00:18.64
</span></code></pre></td></tr></table></div></figure>


<p>So it looks like the build spends 18 seconds on the &ldquo;<em>Platform Verification
Task</em>&rdquo;. A good explanation about what this task is can be found in <a href="http://blogs.msdn.com/vsdteam/archive/2006/09/15/756400.aspx">this blog
post</a>, along
with the solution (although I came to this blog post <strong>after</strong> I found the
solution elsewhere). In fact I simply need to disable the platform
verification task, by editing the <code>Microsoft.CompactFramework.common.targets</code>
file in the <code>C:\Windows\Microsoft.NET\Framework\v3.5 folder</code>. Once the file is
opened using your favorite text editor (mine is <a href="http://notepad-%0Aplus.sourceforge.net/">Notepad++</a>), locate the <code>&lt;target&gt;</code> tag having the <code>name</code> attribute set
to <code>PlatformVerificationTask</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Target</span>
</span><span class='line'>    <span class="na">Name=</span><span class="s">&quot;PlatformVerificationTask&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;PlatformVerificationTask</span>
</span><span class='line'>        <span class="na">PlatformFamilyName=</span><span class="s">&quot;$(PlatformFamilyName)&quot;</span>
</span><span class='line'>        <span class="na">PlatformID=</span><span class="s">&quot;$(PlatformID)&quot;</span>
</span><span class='line'>        <span class="na">SourceAssembly=</span><span class="s">&quot;@(IntermediateAssembly)&quot;</span>
</span><span class='line'>        <span class="na">ReferencePath=</span><span class="s">&quot;@(ReferencePath)&quot;</span>
</span><span class='line'>        <span class="na">TreatWarningsAsErrors=</span><span class="s">&quot;$(TreatWarningsAsErrors)&quot;</span>
</span><span class='line'>        <span class="na">PlatformVersion=</span><span class="s">&quot;$(TargetFrameworkVersion)&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/Target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>then add the <code>Condition</code> attribute to the <code>PlatformVerificationTask</code> tag as
follows (the added line is the no. 4):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Target</span>
</span><span class='line'>    <span class="na">Name=</span><span class="s">&quot;PlatformVerificationTask&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;PlatformVerificationTask</span>
</span><span class='line'>        <span class="na">Condition=</span><span class="s">&quot;&#39;$(DoPlatformVerificationTask)&#39;==&#39;true&#39;&quot;</span> <span class="err">&lt;!--</span> <span class="err">Added</span> <span class="err">--</span><span class="nt">&gt;</span>
</span><span class='line'>        PlatformFamilyName=&quot;$(PlatformFamilyName)&quot;
</span><span class='line'>        PlatformID=&quot;$(PlatformID)&quot;
</span><span class='line'>        SourceAssembly=&quot;@(IntermediateAssembly)&quot;
</span><span class='line'>        ReferencePath=&quot;@(ReferencePath)&quot;
</span><span class='line'>        TreatWarningsAsErrors=&quot;$(TreatWarningsAsErrors)&quot;
</span><span class='line'>        PlatformVersion=&quot;$(TargetFrameworkVersion)&quot;/&gt;
</span><span class='line'><span class="nt">&lt;/Target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Last, save and restart Visual Studio. Now the PlatformVerificationTask is not
reported in the build log any longer, but most important, a normal build takes
less than a second and a rebuild just a couple of seconds.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Task Performance Summary:
</span><span class='line'>        0 ms  CreateProperty                             1 calls
</span><span class='line'>        0 ms  ResolveNonMSBuildProjectOutput             1 calls
</span><span class='line'>        0 ms  AssignTargetPath                          10 calls
</span><span class='line'>        0 ms  ConvertToAbsolutePath                      1 calls
</span><span class='line'>        0 ms  AssignCulture                              1 calls
</span><span class='line'>        0 ms  FindAppConfigFile                          1 calls
</span><span class='line'>        0 ms  Message                                    5 calls
</span><span class='line'>        0 ms  RemoveDuplicates                           2 calls
</span><span class='line'>        0 ms  Delete                                     1 calls
</span><span class='line'>        0 ms  MakeDir                                    1 calls
</span><span class='line'>        1 ms  GetDeviceFrameworkPath                     1 calls
</span><span class='line'>        1 ms  GetFrameworkPath                           1 calls
</span><span class='line'>        3 ms  Copy                                       6 calls
</span><span class='line'>        6 ms  ReadLinesFromFile                          1 calls
</span><span class='line'>       11 ms  FindUnderPath                              5 calls
</span><span class='line'>       33 ms  Csc                                        1 calls
</span><span class='line'>       53 ms  MSBuild                                    3 calls
</span><span class='line'>       75 ms  ResolveAssemblyReference                   1 calls
</span><span class='line'>
</span><span class='line'>Build succeeded.
</span><span class='line'>
</span><span class='line'>Time Elapsed 00:00:00.22
</span></code></pre></td></tr></table></div></figure>


<h4>References</h4>

<p>Visual Studio For Devices blog: <a href="http://blogs.msdn.com/vsdteam/archive/2006/09/15/756400.aspx">Platform Verification Task</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Casting From Base to Derived Class]]></title>
    <link href="http://www.developer-corner.com/2009/06/casting-from-base-to-derived-class"/>
    <updated>2009-07-01T04:59:00+02:00</updated>
    <id>http://www.developer-corner.com/2009/06/casting-from-base-to-derived-class</id>
    <content type="html"><![CDATA[<p>Today a friend of mine asked me how to cast from <code>List&lt;&gt;</code> to a custom
<code>MyCollection</code> class, where <code>MyCollection</code> is derived from <code>List&lt;&gt;</code>. Is this
possible?</p>

<!-- more -->


<p>Let’s suppose we have the following class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and we need a collection of instances of this class, for example using the
generic <code>List&lt;&gt;</code> class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;</span> <span class="n">myCollection</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to improve readability, but also save time when writing code, we are
often tempted to create a non-generic class implementing the list we need –
even if we usually don’t really need such class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyCollection</span> <span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem arises when we use both the generic version and the custom version
of the list in our code, and more specifically when we create an instance
using the generic list and we need to pass this instance to a method expecting
the custom version of the list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// This is the method we need to call</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">DoSomething</span><span class="p">(</span><span class="n">MyCollection</span> <span class="n">myCollection</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;</span> <span class="n">myClass</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;();</span>
</span><span class='line'><span class="n">DoSomething</span><span class="p">(</span><span class="n">myClass</span><span class="p">);</span> <span class="c1">// This doesn&#39;t work</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above generates an error during compilation, whereas a direct cast
from <code>List&lt;MyClass&gt;</code> to <code>MyCollection</code> generates a runtime exception:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;</span> <span class="n">myList</span><span class="p">;</span>
</span><span class='line'><span class="n">MyCollection</span> <span class="n">myCollection</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">myList</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;();</span>
</span><span class='line'><span class="n">myCollection</span> <span class="p">=</span> <span class="p">(</span><span class="n">MyCollection</span><span class="p">)</span> <span class="n">myList</span><span class="p">;</span> <span class="c1">// This generates a runtime exception</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem is that <code>List&lt;MyClass&gt;</code> is a base class and <code>MyCollection</code> is a
derived class, hence there is no way to explicitly perform the cast.</p>

<p>Let’s forget about lists and generics for a moment. We have to classes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyBaseClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyDerivedClass</span> <span class="p">:</span> <span class="n">MyBaseClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I write the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">MyBaseClass</span> <span class="n">myBaseClass</span><span class="p">;</span>
</span><span class='line'><span class="n">MyDerivedClass</span> <span class="n">myDerivedClass</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">myBaseClass</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyBaseClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">myDerivedClass</span> <span class="p">=</span> <span class="p">(</span><span class="n">MyDerivedClass</span><span class="p">)</span> <span class="n">myBaseClass</span><span class="p">;</span>    <span class="c1">// This generates a runtime exception</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last statement obviously causes a runtime exception, as a downcast from a
base class to a derived class cannot be done.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="err">`</span><span class="n">Unhandled</span> <span class="n">Exception</span><span class="p">:</span> <span class="n">System</span><span class="p">.</span><span class="n">InvalidCastException</span><span class="p">:</span> <span class="n">Unable</span> <span class="n">to</span> <span class="n">cast</span> <span class="kt">object</span> <span class="n">of</span>
</span><span class='line'><span class="n">type</span> <span class="err">&#39;</span><span class="n">MyBaseClass</span><span class="err">&#39;</span> <span class="n">to</span> <span class="n">type</span> <span class="err">&#39;</span><span class="n">MyDerivedClass</span><span class="err">&#39;</span><span class="p">.</span>
</span><span class='line'><span class="n">at</span> <span class="n">Program</span><span class="p">.</span><span class="n">Main</span><span class="p">()</span> <span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason is that a derived class (usually) extends the base class by adding
more state objects (i.e. data members). When we create an instance of a base
class, its data members are allocated in memory, but of course data
members of inherited classes are not allocated. So, downcasting from a base to
a derived class is not possible because data members of the inherited class
are not allocated.</p>

<p>But if we instantiate <code>MyBaseClass</code> as <code>MyDerivedClass</code> the cast is allowed – in
other words downcasting is allowed only when the object to be cast is of the
same type as the type it’s being cast to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">myBaseClass</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyDerivedClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">myDerivedClass</span> <span class="p">=</span> <span class="p">(</span><span class="n">MyDerivedClass</span><span class="p">)</span> <span class="n">myBaseClass</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This because <code>myBaseClass</code>, although being a variable of type <code>MyBaseClass</code>, is a
reference to an instance of <code>MyDerivedClass</code>.</p>

<p>In our problem, <code>MyBaseClass</code> is <code>List&lt;MyClass&gt;</code> and <code>MyDerivedClass</code> is
<code>MyCollection</code>, so we are trying to cast an instance of a base class to an
instance of a derived class. It’s evident why the cast we want to do is not
allowed.</p>

<p>So, is there a solution? If we think in terms of casting, the answer is
<strong>NO</strong>. What we can do is a conversion.</p>

<p>The difference between cast and conversion is that the cast operates on the
same object instance, whereas a conversion creates a new copy.</p>

<p>We might think about implementing a conversion operator, either implicit or
explicit, for instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyCollection</span> <span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">implicit</span> <span class="k">operator</span> <span class="nf">MyCollection</span><span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;</span> <span class="n">myClass</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>but it won’t work, as the compiler generates a <code>CS0553</code> error</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&gt;</span> <span class="err">&#39;</span><span class="n">conversion</span> <span class="n">routine</span><span class="err">&#39;</span> <span class="p">:</span> <span class="n">user</span> <span class="n">defined</span> <span class="n">conversion</span> <span class="n">to</span><span class="p">/</span><span class="k">from</span> <span class="k">base</span> <span class="k">class</span>
</span><span class='line'><span class="nc">User</span><span class="p">-</span><span class="n">defined</span> <span class="n">conversions</span> <span class="n">to</span> <span class="n">values</span> <span class="n">of</span> <span class="n">a</span> <span class="k">base</span> <span class="k">class</span> <span class="nc">are</span> <span class="n">not</span> <span class="n">allowed</span><span class="p">;</span> <span class="n">you</span> <span class="k">do</span> <span class="n">not</span>
</span><span class='line'><span class="n">need</span> <span class="n">such</span> <span class="n">an</span> <span class="k">operator</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason why the compiler denies such conversion is that the explicit <em>cast
operator</em> from a base to a derived class is automatically generated, and we
can’t override it with a new <em>conversion operator</em>.</p>

<p>The only viable solutions are either defining a copy constructor or
implementing a method in the derived class which converts the base class to an
instance of the derived class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyCollection</span> <span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Copy constructor</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">MyCollection</span><span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;</span> <span class="n">myList</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span> <span class="p">(</span><span class="n">myList</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Conversion method</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">MyCollection</span> <span class="nf">ToMyCollection</span><span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">MyClass</span><span class="p">&gt;</span> <span class="n">myList</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In both cases, anyway, the conversion implies the creation of a new instance
of the object to be converted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Choosing a Web Color Scheme]]></title>
    <link href="http://www.developer-corner.com/2009/02/choosing-web-color-scheme"/>
    <updated>2009-02-07T15:26:00+01:00</updated>
    <id>http://www.developer-corner.com/2009/02/choosing-web-color-scheme</id>
    <content type="html"><![CDATA[<p>When designing a web site, on of the problems I face with is how to choose colors. Usually I choose a base color, which is the predominant color used in the web design, but how to choose other colors, such as background, headings, panels, borders and so on?</p>

<!-- more -->


<p>My favorite tools for web design are Photoshop and Expression Design 2, plus Expression Web 2 and TopStyle for CSS/HTML editing. Topstyle has a nice feature in its color picker: given a color it suggests the complementary color</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/topstyle-complementary-color.png" alt="TopStyle - Complementary color." /></p>

<p>and the harmonious colors:</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/topstyle-harmonious-colors.png" alt="Topstyle - Harmonious colors" /></p>

<h2>Basics of color theory</h2>

<p>The <strong>opposite</strong> or <strong>complementary color</strong> is defined in wikipedia as &ldquo;<em>the color that is of opposite hue in some color model</em>&rdquo;. Given a color wheel, and chosen a color, the opposite color is the one at the opposite side of the wheel. For example, the opposite color of the red in the following wheel is the green:</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/color-wheel.png" alt="The color wheel" /></p>

<p>If you are wondering what a color wheel is, it&rsquo;s a set of colors hues around a circle. The nice thing about the color wheel is that theoretically any set of colors chosen from the color wheel &ldquo;will look good together&rdquo;. <strong>Harmonious colors</strong> are colors having a fixed relation in the color wheel. For instance, a <em>square color harmony </em>is made up of four colors equally spaced in the color wheel:</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/square-color-scheme.png" alt="Square color scheme" /></p>

<p>There are several other color schemas, such as complementary, triadic and rectangular.</p>

<p>I don&rsquo;t want to discuss further on color theory as honestly I don&rsquo;t feel I am an expert in this area. There are better resources to look for more info, just google for &ldquo;color theory&rdquo; and you will get several valuable introductions.</p>

<h2>Back to TopStyle and introduction to color schemer tools</h2>

<p>After this very brief introduction to color theory, let&rsquo;s get back to TopStyle, the CSS/HTML editor. While using it, I wondered: <em>isn&rsquo;t there any tool to help me choose a good color scheme</em>? The answer is, of course, yes. There are several tools, most of them are web based and free, others are downloadable and installable products, usually commercial products.</p>

<p>As a matter of preference, I like to work with tools installed on my workstation, even if I have to pay a price, and if the tool is worth the price I pay for. So, after googling, trying and discarding several products, I came to the one I currently use.  Its name is <a href="http://www.tigercolor.com/ColorImpact.htm">ColorImpact</a>, a features-rich application providing a color wheel to choose the colors from, plus a set of other useful tools I&rsquo;m going to describe.</p>

<p>At program startup the main window displays a set op options to start with, including a useful set of links about color theory. The left sidebar contains the <strong>color chooser</strong> and the right sidebar contains the <strong>color palette</strong>, where we are able to save the colors we choose. At bottom right there is a <strong>color inspector</strong>, displaying info about the color currently under the mouse cursor in any of the application tools.</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/main-window.png" alt="Main window" /></p>

<p>The largest toolbar at top of the window contains a set of buttons to quickly access all tools, such as the color wheel, a color variations tool, and so on.</p>

<h3>The Color Wheel</h3>

<p>The color wheel is used to select a color harmony. But first a base color should be chosen. ColorImpact provides three different tools to select a color: a wheel, a rectangle and a web safe palette.</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/the-color-wheel.png" alt="The color wheel" />
<img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/the-color-rectangle.png" alt="The color rectangle" />
<img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/the-web-safe-palette.png" alt="The web safe palette" /></p>

<p>The one I like more is the <strong>interactive color wheel</strong>: by simply clicking the small circle and dragging around the wheel we can select a color, and by moving along the radius we can choose a different graduation. During the process of color selection, the color wheel displays the chosen color along with the harmonic colors. Once we&rsquo;re satisfied with our base color, we can choose a color harmony schema selecting from a list available at the bottom center.</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/color-harmonies.png" alt="Color Harmonies" /></p>

<p>If, for instance, we choose the Square color harmony, we&rsquo;ll see the four equally spaced colors in the color wheel highlighted.</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/color-harmonies-tool.png" alt="Color Harmonies tool" /></p>

<p>Colors displayed in the wheel, as well as in any of the tools described below, can be saved in the <strong>color palette</strong> toolbox docked at the right side of the main window, either by double clicking a color on the tool currently in use or dragging a color and dropping into the palette . We have the option of creating multiple palettes, if we need to organize colors in different sets.</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/color-palette.png" alt="Color palette" /></p>

<h3>Other tools</h3>

<p>ColorImpact provides not just a color wheel and the ability to choose a color harmony schema, but several other useful tools which greatly helps in the process of selecting colors and variations.</p>

<p>The <strong>Advanced Color Wheel</strong> displays a color wheel similar to the one displayed in the Color Harmonies tool, but in addition it provides different hues in inner circles of the wheel. It&rsquo;s possible to configure the wheel to display variations from dark to light and vice versa, and from current hues to either darker or lighter variations, more or less saturated, cooler and warmer.</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/advanced-color-wheel-tool.png" alt="Advanced Color Wheel tool" /></p>

<p>The <strong>Color Formulae</strong> provides a list of colors based on a predefined formula selectable from a list of 30 in the drop down list at bottom of the tool page. For each formula a brief description helps us figuring out what&rsquo;s the relation among colors displayed by the tool. Examples of formulas are different hues variations, monochromatic variations, geometrical variations (such as square, rectangle), complementary, and so forth.</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/color-formulae-tool.png" alt="Color Formulae tool" /></p>

<p>Using the <strong>Color Variations</strong> tool we are able to display different color variations, such as darker and lighter, from dark to light and vice versa, more or less saturated, and other combinations.</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/color-variations-tool.png" alt="Color Variations tool" /></p>

<p>The <strong>Color Blender</strong>, as it name implies, provides a list of variations of a color blending into another. Starting and ending colors can be chosen by either using the wheel tool (or any of the color picker tools) or by dragging a color from the palette and dropping into one of the ends</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/color-blender-tool.png" alt="Color Blender tool" /></p>

<p>The last tool is the <strong>Test Pattern</strong>, an undoubtedly useful way of previewing our color palettes and see how colors look when mixed together. There are several test patterns our colors can be tested with, and probably the most interesting to web designers is the <em>Web Page</em> pattern, available in 2 different variations.</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/web-test-pattern.png" alt="Web test pattern" /></p>

<p>Using the Test Pattern tool we are able to drag colors from the palette and drop into any of the web page elements. Once we have applied our colors, we can see how our color schema looks like. There are several other test patterns, such as Fashion (displayed below), type designs, shapes and circles.</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/fashion-test-pattern.png" alt="Fashion test pattern" /></p>

<p>One of the coolest things about test patterns is that we can create our own, using Flash MX. On the website there is a brief tutorial describing how to create a custom test pattern and adding it to the list of test patterns.</p>

<h2>Import and Export</h2>

<p>I can&rsquo;s say that a tool like ColorImpact is useless without import and export features, because I&rsquo;d still benefit from using it even if having to manually copy color values. But having such features is a plus (other than a must for most people). Although import is limited to XML and <a href="http://www.colorschemer.com/">Color Schemer</a> (a similar tool for choosing color schemes), ColorImpact is able to export into any of the following formats:</p>

<ul>
<li>Image containing the list of colors along with their hexadecimal values (gif, bmp, jpg, png, windows metafile and enhanced metafile)</li>
<li>Text file, listing all color names and values</li>
<li>HTML Spec Sheet, an html page displaying colors and color values</li>
<li>CSS</li>
<li>ACT Color Table</li>
<li>Paint Shop Pro palette</li>
<li>Photoshop color palette</li>
<li>Illustrator color palette</li>
<li>Freehand ACF palette</li>
</ul>


<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/html-spec-sheet.png" alt="HTML Spec Sheet" /></p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/css-export.png" alt="CSS Export" /></p>

<h2>Additional tools</h2>

<p>Other than the important tools described so far, there are some other minor features making life easier when selecting colors. With the <strong>eye dropper tool</strong> we can select a color from any point of the desktop or any open window, with the additional ability to get either the exact color or an average of its surrounding area</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/eye-dropper-tool.png" alt="image" /></p>

<p>With the <strong>color blindness simulation</strong> we can simulate how our colors set will be seen by color blindness people.</p>

<p><img src="http://www.developer-corner.com/res/images/2009-02-07-choosing-web-color-scheme/color-blindness-simulation.png" alt="image" /></p>

<p>The <strong>random color </strong>tool simply generates a random color.</p>

<h2>Conclusions</h2>

<p>As mentioned earlier, once I realized that there are tools specifically targeted to simplify color schemes selection, I have tried several tools. In the process of selecting the most appropriate tool I took into account several aspects, such as user friendliness, number of features and exporting capabilities. The tool at the 2nd place of my personal favorite list is Color Schemer, which I didn&rsquo;t like for just one thing, very important to me: it runs on a fixed sized window, too small in my opinion, also considering that I&rsquo;m used to work with high resolution monitors, such as my 15,4&#8221; 1920x1200 laptop display.</p>

<p>ColorImpact implements all the features required to easily and quickly choose web color schemes, also providing unique features I haven&rsquo;t seen in other applications. So, I can&rsquo;t do anything else than suggesting to whoever reads this blog post to give it a try &ndash; you&rsquo;ll like it. A 15 days trial version can be downloaded at the following address:</p>

<p><a href="http://www.tigercolor.com/Download/Default.htm">http://www.tigercolor.com/Download/Default.htm</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Integrity Check Using Hashing]]></title>
    <link href="http://www.developer-corner.com/2008/10/data-integrity-check-using-hashing"/>
    <updated>2008-11-01T18:19:00+01:00</updated>
    <id>http://www.developer-corner.com/2008/10/data-integrity-check-using-hashing</id>
    <content type="html"><![CDATA[<p>When data is moved across a network, the recipient might require a verification to ensure that data has not been modified after send.</p>

<p>For example, in a client/server scenario where a client application sends some updates to a remote database via a web service, the web service might need to verify whether the data has not been modified while travelling across the network, either due to corruption or because somebody changed it. A simple way to implement such kind of verification is utilizing <strong>hashing</strong>.</p>

<!-- more -->


<h2>How Hashing works</h2>

<p>The idea behind hashing is to generate a (ideally) <strong>unique</strong> and <strong>non–reversible code</strong> generated from the data being sent.</p>

<p><em>Unique</em> means that the codes generated from 2 different sets of data must be different, regardless of the data size, and even if they differ by 1 byte or 1 bit only.</p>

<p><em>Non-reversible</em> means that the hash code cannot be used to recreate the original data.</p>

<p>For the purpose of signing data to check for modification, the non-reversibility feature is unnecessary, as the hash code travels with the data, but there are other cases where it is undoubtedly useful.</p>

<p>For example, one of the easiest way to prevent passwords from being stored in a database is to store a hash code rather than the password itself. This way, when a user is authenticating, the password is used to generate an hash key, which is compared to the hash key stored in the database (previously generated when the user account has been created, or the last time the user has changed his password) – if  they match, authentication succeeds. The drawback of this method is that a “recall password” feature cannot be implemented, as the password is not stored anywhere, and the non reversibility property of the hash code prevents it from being used to recreate the original data – in such case a “reset password” feature is more appropriate.</p>

<h2>Hashing and Salting</h2>

<p>Using the model described above, data is protected against corruption but not against changes. In fact, whereas a corruption is immediately detected once the recipient verifies that the <a href="http://en.wikipedia.org/wiki/Hash_function">hash codes</a> don’t match, an hacker attempting to modify the data simply has to create a new hash code. Since this code is sent with the data, and since the hashing algorithm is deterministic, whoever wants to modify the data has all ingredients to do so, with no risk of being detected.</p>

<p>So hashing is not enough to guarantee data integrity. One common practice is to use a random or predefined string, which is appended to the data before calculating the hash code. This additional string is known as <strong><a href="http://en.wikipedia.org/wiki/Salt_%28cryptography%29">salt</a></strong>. If the salt is known by sender and recipient only, an hacker has no way to generate an hash code that won’t be immediately detected by the recipient during hash verification.<br/>
In this scenario the salt can be thought as a private key shared between sender and recipient.</p>

<p>For improved security, it’s better if the salt is not 100% static – for example, a dynamic string depending from the date and/or time can be mixed to the static salt in order to generate a dynamic salt, harder for an hacker to guess. For this method to work both sender and recipient must generate the same salt in a wide enough time window. For example, supposing that sender and recipient have their clocks synchronized, if the salt is composed by current hour and minute, the widest time window is 60 seconds – but the recipient
could generate a different salt just 1 second after the sender generated the salt code, if this occurs, for example, at 10:20:59. In this case the sender use 10:20 to generate the salt – if the recipient receives the message at least 1 second later, it will use 10:21 to generate the salt. And this obviously leads to a completely different hash code.</p>

<h2>Implementing a data integrity check</h2>

<p>There are several algorithms that can be use to generate hash codes. One of them is <a href="http://en.wikipedia.org/wiki/MD5">MD5</a>, implementable as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Security.Cryptography</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">Hash</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="k">public</span> <span class="k">class</span> <span class="nc">HashGenerator</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GenerateMd5Hash</span><span class="p">(</span><span class="kt">string</span> <span class="n">salt</span><span class="p">,</span> <span class="kt">string</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>   <span class="kt">byte</span><span class="p">[]</span> <span class="n">buffer</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">byte</span><span class="p">[]</span> <span class="n">binaryHash</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">string</span> <span class="n">stringHash</span><span class="p">;</span>
</span><span class='line'>   <span class="n">MD5</span> <span class="n">md5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">md5</span> <span class="p">=</span> <span class="n">MD5</span><span class="p">.</span><span class="n">Create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Combine salt + data and convert to array of bytes</span>
</span><span class='line'>   <span class="n">buffer</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">salt</span> <span class="p">+</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Create the hash code from salt + data</span>
</span><span class='line'>   <span class="n">binaryHash</span> <span class="p">=</span> <span class="n">md5</span><span class="p">.</span><span class="n">ComputeHash</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// The hash code is in binary format - convert</span>
</span><span class='line'>   <span class="c1">// it in readable string</span>
</span><span class='line'>   <span class="n">stringHash</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToBase64String</span><span class="p">(</span><span class="n">binaryHash</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">stringHash</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code is pretty simple: salt + data are combined together and converted to array of bytes, then the ComputeHash method of the MD5 instance creates the hash code given the array of bytes. Last, since the hash generated by <code>ComputeHash</code> is in binary format, it is converted to string and returned. To test this code we can create a simple console application like the following one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Hash</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nn">HashSample</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>   <span class="kt">string</span> <span class="n">test</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">string</span> <span class="n">hash</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">string</span> <span class="n">salt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">test</span> <span class="p">=</span> <span class="s">&quot;This is a sample data&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="n">salt</span> <span class="p">=</span> <span class="s">&quot;FTSA74D71KSAP&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">hash</span> <span class="p">=</span> <span class="n">HashGenerator</span><span class="p">.</span><span class="n">GenerateMd5Hash</span><span class="p">(</span><span class="n">salt</span><span class="p">,</span> <span class="n">test</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Console</span><span class="p">.</span><span class="n">Out</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;The hash code for string &#39;{0}&#39; and salt &#39;{1}&#39; is:\n\t{2}&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">test</span><span class="p">,</span> <span class="n">salt</span><span class="p">,</span> <span class="n">hash</span>
</span><span class='line'>   <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Console</span><span class="p">.</span><span class="n">In</span><span class="p">.</span><span class="n">Read</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output produced by this application is the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="err">`</span><span class="n">The</span> <span class="n">hash</span> <span class="n">code</span> <span class="k">for</span> <span class="kt">string</span> <span class="err">&#39;</span><span class="n">This</span> <span class="k">is</span> <span class="n">a</span> <span class="n">sample</span> <span class="n">data</span><span class="err">&#39;</span> <span class="n">and</span> <span class="n">salt</span> <span class="err">&#39;</span><span class="n">FTSA74D71KSAP</span><span class="err">&#39;</span> <span class="k">is</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="n">s2gxEi9C3QSRGFy</span><span class="p">+</span><span class="n">cZheWA</span><span class="p">==</span><span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>To prove how the hash code changes by simply changing 1 byte in the original data, let’s see what happens if we slightly change the test string to “This is <strong>b</strong> sample data”:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="err">`</span><span class="n">The</span> <span class="n">hash</span> <span class="n">code</span> <span class="k">for</span> <span class="kt">string</span> <span class="err">&#39;</span><span class="n">This</span> <span class="k">is</span> <span class="n">b</span> <span class="n">sample</span> <span class="n">data</span><span class="err">&#39;</span> <span class="n">and</span> <span class="n">salt</span> <span class="err">&#39;</span><span class="n">FTSA74D71KSAP</span><span class="err">&#39;</span> <span class="k">is</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="n">FJr7RUcSYJMJBdfCg6DCXQ</span><span class="p">==</span> <span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see that these 2 hashes are completely different.</p>

<h2><code>IHashable</code> interface</h2>

<p>If we need to generate an hash code on instances of a class, why don’t we define a proper interface? This way we can just implement the interface and write a single function to generate the hash code. The interface name is, of course, <code>IHashable</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IHashable</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">string</span> <span class="nf">GetHashableRepresentation</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">string</span> <span class="nf">GenerateSalt</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and consists of 2 methods: <code>GetHashableRepresentation</code> and <code>GenerateSalt</code>. The latter should be implemented in order to generate a proper salt code, whereas the former should return a representation of the class instance in a string format suitable for hashing &ndash; for example, a simple string concatenation of all data members.</p>

<p>As I mentioned earlier, there are several algorithms usable for hashing. Following a comprehensive implementation of the hash generation, which allows the caller to choose which algorithm to use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">enum</span> <span class="n">HashingAlgorithm</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Md5</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Sha1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Sha256</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Sha384</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Sha512</span><span class="p">,</span>
</span><span class='line'>    <span class="n">RipeMd160</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GenerateHash</span><span class="p">(</span><span class="n">HashingAlgorithm</span> <span class="n">alg</span><span class="p">,</span> <span class="n">IHashable</span> <span class="n">hashable</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">HashAlgorithm</span> <span class="n">algorithm</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">algorithm</span> <span class="p">=</span> <span class="n">CreateHashAlgorithm</span><span class="p">(</span><span class="n">alg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">byte</span><span class="p">[]</span> <span class="n">buffer</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">byte</span><span class="p">[]</span> <span class="n">binaryHash</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">stringHash</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Combine salt + data and convert to array of bytes</span>
</span><span class='line'>    <span class="n">buffer</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">hashable</span><span class="p">.</span><span class="n">GetHashableRepresentation</span><span class="p">()</span> <span class="p">+</span> <span class="n">hashable</span><span class="p">.</span><span class="n">GenerateSalt</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create the hash code from salt + data</span>
</span><span class='line'>    <span class="n">binaryHash</span> <span class="p">=</span> <span class="n">algorithm</span><span class="p">.</span><span class="n">ComputeHash</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The hash code is in binary format - convert</span>
</span><span class='line'>    <span class="c1">// it in readable string</span>
</span><span class='line'>    <span class="n">stringHash</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToBase64String</span><span class="p">(</span><span class="n">binaryHash</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">stringHash</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="n">HashAlgorithm</span> <span class="nf">CreateHashAlgorithm</span><span class="p">(</span><span class="n">HashingAlgorithm</span> <span class="n">alg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">HashAlgorithm</span> <span class="n">algorithm</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">alg</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">default</span><span class="p">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">HashingAlgorithm</span><span class="p">.</span><span class="n">Md5</span><span class="p">:</span>
</span><span class='line'>            <span class="n">algorithm</span> <span class="p">=</span> <span class="n">MD5</span><span class="p">.</span><span class="n">Create</span><span class="p">();</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="n">HashingAlgorithm</span><span class="p">.</span><span class="n">Sha1</span><span class="p">:</span>
</span><span class='line'>            <span class="n">algorithm</span> <span class="p">=</span> <span class="n">SHA1</span><span class="p">.</span><span class="n">Create</span><span class="p">();</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="n">HashingAlgorithm</span><span class="p">.</span><span class="n">Sha256</span><span class="p">:</span>
</span><span class='line'>            <span class="n">algorithm</span> <span class="p">=</span> <span class="n">SHA256</span><span class="p">.</span><span class="n">Create</span><span class="p">();</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="n">HashingAlgorithm</span><span class="p">.</span><span class="n">Sha384</span><span class="p">:</span>
</span><span class='line'>            <span class="n">algorithm</span> <span class="p">=</span> <span class="n">SHA384</span><span class="p">.</span><span class="n">Create</span><span class="p">();</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="n">HashingAlgorithm</span><span class="p">.</span><span class="n">Sha512</span><span class="p">:</span>
</span><span class='line'>            <span class="n">algorithm</span> <span class="p">=</span> <span class="n">SHA512</span><span class="p">.</span><span class="n">Create</span><span class="p">();</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="n">HashingAlgorithm</span><span class="p">.</span><span class="n">RipeMd160</span><span class="p">:</span>
</span><span class='line'>            <span class="n">algorithm</span> <span class="p">=</span> <span class="n">RIPEMD160</span><span class="p">.</span><span class="n">Create</span><span class="p">();</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">algorithm</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>GenerateHash</code> method requires 2 parameters: the algorithm to use and an instance of <code>IHashable</code>. In return, the method provides an hash code generated using the specified algorithm.</p>

<p>Last thing to mention, a helpful method to compare an hash code with an <code>IHashable</code> instance – its implementation is really very simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">CompareHashes</span><span class="p">(</span><span class="n">HashingAlgorithm</span> <span class="n">alg</span><span class="p">,</span> <span class="kt">string</span> <span class="n">hash</span><span class="p">,</span> <span class="n">IHashable</span> <span class="n">hashable</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">GenerateHash</span><span class="p">(</span><span class="n">alg</span><span class="p">,</span> <span class="n">hashable</span><span class="p">).</span><span class="n">Equals</span><span class="p">(</span><span class="n">hash</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Digital signature</h2>

<p>When used alone, hashing is good but it’s not the best. There are better ways, out of the scope of this article – but I want to spend a few words about them.</p>

<p>The safest and more secure way to sign data is using <a href="http://en.wikipedia.org/wiki/Digital_signature">digital
signature</a>, which make use of asymmetric cryptography (also known as <a href="http://en.wikipedia.org/wiki/Public-key_cryptography">public key
cryptography</a>).</p>

<p>The idea is to encrypt the hash code so that it cannot be modified.<br/>
In cryptography a key is used to encrypt and decrypt data – it’s not an algorithm, but a secret data used for encryption: using a different key different encrypted data is generated.</p>

<p>A (very simple) example of key is the salt we’ve seen earlier: changing the salt will produce a different hash code. Keys are usually used to encrypt and decrypt data.</p>

<p>In symmetric cryptography the same key is used to encrypt and decrypt data. This is the biggest limitation, as the key must be owned by both parties involved in the encryption and decryption process, or sent along with the encrypted data if the recipient doesn’t have the key.</p>

<p>In public key cryptography a key is composed by a public key and a private key. The private key, as the name implies, is private and should never be sent to anybody. On the other hand, the public key can be published and made available to anybody. The key owner uses his private key to encrypt data – anybody can decrypt the data using the public key, but the cool feature is that the public key can be used to decrypt data encrypted by the corresponding private key only. This means that who is decrypting is sure that data has been encrypted by the owner of the private key only. Keys can also be used in the opposite way: data encrypted with the public key can only be decrypted by the corresponding private key. This way whoever encrypts data using the public key is sure that data will be available to the owner of the corresponding private key only.</p>

<p>In our hashing problem, if the sender encrypts the hash code using his private key, the recipient is able to detect any unauthorized data modification:</p>

<ul>
<li><p>if the data gets corrupted or changed, the hash code calculated from the data won’t match with the encrypted hash code provided with the data</p></li>
<li><p>if the encrypted hash code provided with the data is modified, it won’t match with the hash code calculated from the data</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mark a C# Class Data Member as Readonly When It’s Read Only]]></title>
    <link href="http://www.developer-corner.com/2009/01/mark-c-class-data-member-as-readonly"/>
    <updated>2008-10-03T03:50:00+02:00</updated>
    <id>http://www.developer-corner.com/2009/01/mark-c-class-data-member-as-readonly</id>
    <content type="html"><![CDATA[<p>The <code>readonly</code> modifier is used to declare an instance-specific constant data member which can be initialized in the class constructor and is not limited to compiler-time constants only, providing more flexibility than using the <code>const</code> modifier.</p>

<!-- more -->


<p>The <code>const</code> modifier implicitly defines the data member as static, and must be initialized along with its declaration, as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">myConst</span> <span class="p">=</span> <span class="m">5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the const is not initialized along with the declaration, the compiler will generate an error. Moreover, a const data member must be initialized with a compile-time constant – in other words there is no way to initialize a constant using a runtime value. For instance, the following code won&rsquo;t compile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="n">nonConstValue</span> <span class="p">=</span> <span class="s">&quot;This is a variable initialized at runtime&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">constValue</span> <span class="p">=</span> <span class="n">nonConstValue</span><span class="p">;</span>  <span class="c1">// Compilation error</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>as the compiler will inform that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">The</span> <span class="n">expression</span> <span class="n">being</span> <span class="n">assigned</span> <span class="n">to</span> <span class="err">&#39;</span><span class="n">MyClass</span><span class="p">.</span><span class="n">constValue</span><span class="err">&#39;</span> <span class="n">must</span> <span class="n">be</span> <span class="n">constant</span>
</span></code></pre></td></tr></table></div></figure>


<p>The advantage of defining a data member as <code>const</code> is that it cannot be changed – the drawback being the inability to initialize the field in a different place other than the declaration.</p>

<p>On the other hand, the <code>readonly</code> modifier extends the const modifier by allowing the data member to be initialized <em>in any class constructor</em>. This allows a data member to be initialized when a class is being instantiated, preventing it from being modified in any other class method – in other words, once the const data member is initialized it never changes during the class instance lifetime.</p>

<p>As opposed to the <code>const</code> modifier, the <code>readonly</code> modifier creates an instance-specific data member, so each class instance will have its own readonly data member instances. This doesn’t mean that a readonly data
member cannot be static – simply it must explicitly be declared as such.</p>

<p>All the following declarations and initializations are valid:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">readonly</span> <span class="kt">int</span> <span class="n">_myIntField</span> <span class="p">=</span> <span class="m">5</span><span class="p">;</span> <span class="c1">// Allowed</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">_myStringField</span><span class="p">;</span> <span class="c1">// Allowed</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">MyClass</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">_myIntField</span> <span class="p">=</span> <span class="m">8</span><span class="p">;</span>         <span class="c1">// Allowed</span>
</span><span class='line'>    <span class="n">_myStringField</span> <span class="p">=</span> <span class="s">&quot;Initialized in the constructor&quot;</span><span class="p">;</span> <span class="c1">// Allowed</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">MyClass</span> <span class="n">myClass</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">myClass</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">Out</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;myIntField = {0}&quot;</span><span class="p">,</span> <span class="n">myClass</span><span class="p">.</span><span class="n">_myIntField</span><span class="p">));</span>
</span><span class='line'>    <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">Out</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;myStringField = {0}&quot;</span><span class="p">,</span> <span class="n">myClass</span><span class="p">.</span><span class="n">_myStringField</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The member declared at line 4 is initialized in the constructor with a string constant, whereas the <code>int</code> member declared at line 3 is initialized both in the declaration and in the constructor. In this case, the constructor initialization takes precedence, as it is executed after the data member instantiation.</p>

<p>The following case instead is not valid:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">_myStringField</span><span class="p">;</span> <span class="c1">// Allowed</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">MyClass</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Init</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">Init</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_myStringField</span> <span class="p">=</span> <span class="s">&quot;Cannot be initialized here&quot;</span><span class="p">;</span>  <span class="c1">// Compilation error</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s because the <code>readonly</code> member is initialized in a class member which is not a constructor, even if this method is called from the constructor. The reason why this is not allowed is that the <code>Init()</code> method can virtually be called from anywhere within the class, or even outside if it is protected, internal or
public rather than private.</p>

<p>Another advantage of the <code>readonly</code> modifier is that it can be initialized with a runtime value or an expression evaluated at runtime, for instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">readonly</span> <span class="kt">int</span>  <span class="n">_myIntField</span><span class="p">;</span> <span class="c1">// Allowed</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">MyClass</span><span class="p">(</span><span class="kt">int</span> <span class="n">runtimeValue</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">_myIntField</span> <span class="p">=</span> <span class="m">10</span> <span class="p">*</span> <span class="n">runtimeValue</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">MyClass</span> <span class="n">myClass</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">myClass</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyClass</span><span class="p">(</span><span class="m">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">Out</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;myIntField = {0}&quot;</span><span class="p">,</span> <span class="n">myClass</span><span class="p">.</span><span class="n">_myIntField</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can expect, the <code>_myIntField</code> readonly data member will be initialized to <code>10 * 5 = 50</code>.</p>

<p>Readonly data members are not limited to basic data types – it can be used for class instances. For example, when writing a database accessor class we might want to provide a database connection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyDatabaseAccessor</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">readonly</span> <span class="n">SqlConnection</span> <span class="n">_connection</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">MyDatabaseAccessor</span> <span class="p">(</span><span class="n">SqlConnection</span> <span class="n">connection</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>   <span class="n">_connection</span> <span class="p">=</span> <span class="n">connection</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyApp</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">SqlConnection</span> <span class="n">connection</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SqlConnection</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Initialize the connection</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MyDatabaseAccessor</span> <span class="n">myAccessor</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyDatabaseAccessor</span><span class="p">(</span><span class="n">connection</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Do something</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code would work without declaring the <code>_connection</code> data member as readonly – but in such case the connection variable can be changed anywhere in the class.</p>

<p>It’s important to keep in mind that when a <code>readonly</code> data member is of a reference type (i.e. instance of a class and not either a struct or a base data type) the <strong>reference is constant</strong>, but <strong>the instance it points to</strong> is not. So the internal status of a readonly instance can change and can be changed, as proven by the following sample:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// Class with a data member</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyClassType</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="kt">string</span> <span class="n">_internalStatus</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">InternalStatus</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">get</span> <span class="p">{</span><span class="k">return</span> <span class="n">_internalStatus</span><span class="p">;}</span>
</span><span class='line'>    <span class="k">set</span> <span class="p">{</span><span class="n">_internalStatus</span> <span class="p">=</span> <span class="k">value</span><span class="p">;}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Class with a readonly data member</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyClassWithReadonlyMember</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">readonly</span> <span class="n">MyClassType</span> <span class="n">_readonlyInstance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">MyClassWithReadonlyMember</span><span class="p">(</span><span class="kt">string</span> <span class="k">value</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">_readonlyInstance</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyClassType</span><span class="p">();</span>
</span><span class='line'>    <span class="n">_readonlyInstance</span><span class="p">.</span><span class="n">InternalStatus</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">void</span> <span class="nf">SetStatus</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">_readonlyInstance</span><span class="p">.</span><span class="n">InternalStatus</span> <span class="p">=</span> <span class="n">message</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">void</span> <span class="nf">OutputStatus</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">Out</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span>
</span><span class='line'>    <span class="s">@&quot;Internal status = &#39;{0}&#39;&quot;</span><span class="p">,</span> <span class="n">_readonlyInstance</span><span class="p">.</span><span class="n">InternalStatus</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyApp</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">MyClassWithReadonlyMember</span> <span class="n">classInstance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create an instance of MyClassWithReadOnlyMember class</span>
</span><span class='line'>    <span class="c1">// The instance of MyClassType is initialized to the default </span>
</span><span class='line'>    <span class="c1">// value provided in the constructor</span>
</span><span class='line'>    <span class="n">classInstance</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyClassWithReadonlyMember</span><span class="p">(</span><span class="s">&quot;Initial value&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">classInstance</span><span class="p">.</span><span class="n">OutputStatus</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The internal status of the readonly data member of </span>
</span><span class='line'>    <span class="c1">// MyClassWithReadonlyMember is changed</span>
</span><span class='line'>    <span class="n">classInstance</span><span class="p">.</span><span class="n">SetStatus</span><span class="p">(</span><span class="s">&quot;New Value&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">classInstance</span><span class="p">.</span><span class="n">OutputStatus</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>If this code is compiled and run, it will generate the following output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&gt;</span> <span class="n">Internal</span> <span class="n">status</span> <span class="p">=</span> <span class="err">&#39;</span><span class="n">Initial</span> <span class="k">value</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">Internal</span> <span class="n">status</span> <span class="p">=</span> <span class="err">&#39;</span><span class="n">New</span> <span class="n">Value</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2009.01.30 Addendum</h2>

<p>Thanks to what Chris Marisic highlighted in his comments below, I need to clarify a few points to prevent some misleading assumptions.</p>

<p><strong>#1</strong> &ndash; <code>readonly</code> members can be modified using reflection. The <code>readonly</code> modifier is a compiler directive, so any attempt to modify a readonly data member is detected during compilation. A consequence is that using reflection it&rsquo;s possible to modify a <code>readonly</code> data member</p>

<p><strong>#2</strong> &ndash; I wrote above that the <code>const</code> modifier &ldquo;<em>allows a data member to be initialized when a class is being instantiated, preventing it from being modified in any other class method</em>&rdquo;. This statement doesn&rsquo;t mean that the data member is immutable, at least not always. .NET supports two kinds of data types: <strong>value types</strong> and <strong>reference types</strong>:<br/>
* value types are allocated on the thread&rsquo;s stack and they hold the actual value<br/>
* reference types are allocated on the thread&rsquo;s stack and they hold a pointer to an object allocated in the managed heap</p>

<p>In both cases variables are allocated on the thread&rsquo;s stack, the difference being that a value type holds the actual value (for example, an <code>int</code>, a <code>struct</code>), whereas the reference type holds a pointer to the memory area where the actual value is stored (for example, an instance of a <code>StringBuilder</code> class).</p>

<p>When a value type is declared as <code>readonly</code>, its value is immutable, meaning that once assigned it cannot be modified outside constructors.</p>

<p>When a reference type is declared as readonly, the pointer is immutable, but not the object it points to. This means that:</p>

<ul>
<li><p>a reference type data member can be initialized in order to point to an instance of a class, but once this is done it&rsquo;s not possible to make it point to another instance of a class outside of constructors</p></li>
<li><p>the <code>readonly</code> modifier has no effect on the object the readonly data member points to.</p></li>
</ul>


<p>Maybe a real example helps to better understand the difference. Let&rsquo;s create a simple class and a simple struct. They have one int data member only.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="n">IntField</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">struct</span> <span class="nc">MyStruct</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="n">IntField</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s use them in a test class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyTestClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">readonly</span> <span class="n">MyClass</span> <span class="n">_myClass</span><span class="p">;</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">readonly</span> <span class="n">MyStruct</span> <span class="n">_myStruct</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">MyTestClass</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">_myClass</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyClass</span><span class="p">();</span>
</span><span class='line'>    <span class="n">_myClass</span><span class="p">.</span><span class="n">IntField</span> <span class="p">=</span> <span class="m">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_myStruct</span><span class="p">.</span><span class="n">IntField</span> <span class="p">=</span> <span class="m">5</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>_myClass</code> data member is a reference type, so it must be initialized by allocating a new instance of <code>MyClass</code> and assigning its pointer, as seen at line 8. On the other hand, the <code>_myStruct</code> data member is a value type, meaning that it is already an instance of <code>MyStruct</code>. Initialization of their respective
fields are done at lines 9 and 11.</p>

<p>Let&rsquo;s add a method to the <code>MyTestClass</code> class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">MyTestClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">readonly</span> <span class="n">MyClass</span> <span class="n">_myClass</span><span class="p">;</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">readonly</span> <span class="n">MyStruct</span> <span class="n">_myStruct</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">MyTestClass</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">_myClass</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MyClass</span><span class="p">();</span>
</span><span class='line'>    <span class="n">_myClass</span><span class="p">.</span><span class="n">IntField</span> <span class="p">=</span> <span class="m">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_myStruct</span><span class="p">.</span><span class="n">IntField</span> <span class="p">=</span> <span class="m">5</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">void</span> <span class="nf">TestReadonly</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">_myClass</span><span class="p">.</span><span class="n">IntField</span> <span class="p">=</span> <span class="m">7</span><span class="p">;</span>  <span class="c1">// Valid statement</span>
</span><span class='line'>    <span class="n">_myStruct</span><span class="p">.</span><span class="n">IntField</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span> <span class="c1">// Error: _myStruct is readonly</span>
</span><span class='line'>    <span class="n">_myClass</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>   <span class="c1">// Error: _myClass is readonly</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we try to compile this code, we get 2 errors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&gt;</span> <span class="n">MyTest</span><span class="p">.</span><span class="n">cs</span><span class="p">(</span><span class="m">26</span><span class="p">,</span><span class="m">3</span><span class="p">):</span> <span class="n">error</span> <span class="n">CS1648</span><span class="p">:</span> <span class="n">Members</span> <span class="n">of</span> <span class="k">readonly</span> <span class="n">field</span> <span class="err">&#39;</span><span class="n">MyTestClass</span><span class="p">.</span><span class="n">_myStruct</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">cannot</span> <span class="n">be</span> <span class="nf">modified</span> <span class="p">(</span><span class="n">except</span> <span class="k">in</span> <span class="n">a</span> <span class="n">constructor</span> <span class="n">or</span> <span class="n">a</span> <span class="n">variable</span> <span class="n">initializer</span><span class="p">)</span>
</span><span class='line'><span class="n">MyTest</span><span class="p">.</span><span class="n">cs</span><span class="p">(</span><span class="m">27</span><span class="p">,</span><span class="m">3</span><span class="p">):</span> <span class="n">error</span> <span class="n">CS0191</span><span class="p">:</span> <span class="n">A</span> <span class="k">readonly</span> <span class="n">field</span> <span class="n">cannot</span> <span class="n">be</span> <span class="n">assigned</span> <span class="n">to</span> <span class="p">(</span><span class="n">except</span> <span class="k">in</span>
</span><span class='line'><span class="n">a</span> <span class="n">constructor</span> <span class="n">or</span> <span class="n">a</span> <span class="n">variable</span> <span class="n">initializer</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>MyStruct</code> is a struct, hence a value type; <code>_myStruct</code> is immutable since declared as <code>readonly</code>, so any of its data members cannot be modified outside of a constructor.</p>

<p><code>MyClass</code> is a class, hence a reference type; <code>_myClass</code> is immutable since declared as readonly, so it cannot be modified in order to point to another instance of a class (or to <code>null</code>) outside of a constructor.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DataGridView: How to Bind Nested Objects]]></title>
    <link href="http://www.developer-corner.com/2007/07/datagridview-how-to-bind-nested-objects"/>
    <updated>2007-07-19T06:49:00+02:00</updated>
    <id>http://www.developer-corner.com/2007/07/datagridview-how-to-bind-nested-objects</id>
    <content type="html"><![CDATA[<p>The WinForms <code>DatagridView</code> control is not capable of handling nested properties, as it works with base data types only. But implementing such feature is not complicated. Let’s see how.</p>

<!-- more -->


<h3>The Problem</h3>

<p>A <code>DataGridView</code> can be bound to a collection of objects to display any of its base data type (i.e. string, int, and so on) properties. For example, a collection of instances of the following class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">Street</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">PostalCode</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">City</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>can be used to display any of the <code>Customer</code> class properties in the <code>DataGridView</code>.</p>

<p>But what happens when the class exposes other objects which are not base data type? If an <code>Address</code> class is created and used as a property of the <code>Customer</code> class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Address</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">Street</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">PostalCode</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">City</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">Address</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>a <code>DataGridView</code> bound to a collection of <code>Customer</code> instances is not able to display any of the <code>Address</code> properties. In such cases the displayed cells are empty.</p>

<h3>The Solution</h3>

<p>In order to enable the <code>DataGridView</code> to display properties exposed by class members, some custom development is required. The first step is to implement the <code>DataGridView</code>&rsquo;s <code>CellFormatting</code> event handler</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">gridCustomers_CellFormatting</span><span class="p">(</span>
</span><span class='line'>  <span class="kt">object</span> <span class="n">sender</span><span class="p">,</span>
</span><span class='line'>  <span class="n">DataGridViewCellFormattingEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>CellFormatting</code> event handler needs to differentiate whether the field to be displayed is one of the base data type or an object exposing its own properties. This is achieved by looking for the dot character &lsquo;.&rsquo; in the column&rsquo;s <code>DataPropertyName</code> field:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">gridCustomers_CellFormatting</span><span class="p">(</span>
</span><span class='line'>  <span class="kt">object</span> <span class="n">sender</span><span class="p">,</span>
</span><span class='line'>  <span class="n">DataGridViewCellFormattingEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">gridCustomers</span><span class="p">.</span><span class="n">Rows</span><span class="p">[</span><span class="n">e</span><span class="p">.</span><span class="n">RowIndex</span><span class="p">].</span><span class="n">DataBoundItem</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>      <span class="p">(</span><span class="n">gridCustomers</span><span class="p">.</span><span class="n">Columns</span><span class="p">[</span><span class="n">e</span><span class="p">.</span><span class="n">ColumnIndex</span><span class="p">].</span><span class="n">DataPropertyName</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the <code>DataPropertyName</code> field doesn&rsquo;t contain a dot character, then the actual value of the base data type property must be displayed &ndash; in this case no action is required, since it is already filled in <code>e.Value</code>.</p>

<p>On the other hand, if the <code>DataPropertyName</code> field contains one or more dot characters, then it points to a property exposed by one of the bound class properties. For example, <code>Address.Street</code> contains the dot character, and it points to the <code>Street</code> property of the <code>Address</code> property of a <code>Customer</code> instance. To handle this cases, a recursive function <code>BindProperty</code> is used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">gridCustomers_CellFormatting</span><span class="p">(</span>
</span><span class='line'>  <span class="kt">object</span> <span class="n">sender</span><span class="p">,</span>
</span><span class='line'>  <span class="n">DataGridViewCellFormattingEventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">gridCustomers</span><span class="p">.</span><span class="n">Rows</span><span class="p">[</span><span class="n">e</span><span class="p">.</span><span class="n">RowIndex</span><span class="p">].</span><span class="n">DataBoundItem</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>      <span class="p">(</span><span class="n">gridCustomers</span><span class="p">.</span><span class="n">Columns</span><span class="p">[</span><span class="n">e</span><span class="p">.</span><span class="n">ColumnIndex</span><span class="p">].</span><span class="n">DataPropertyName</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="n">e</span><span class="p">.</span><span class="n">Value</span> <span class="p">=</span> <span class="n">BindProperty</span><span class="p">(</span>
</span><span class='line'>                <span class="n">gridCustomers</span><span class="p">.</span><span class="n">Rows</span><span class="p">[</span><span class="n">e</span><span class="p">.</span><span class="n">RowIndex</span><span class="p">].</span><span class="n">DataBoundItem</span><span class="p">,</span>
</span><span class='line'>                <span class="n">gridCustomers</span><span class="p">.</span><span class="n">Columns</span><span class="p">[</span><span class="n">e</span><span class="p">.</span><span class="n">ColumnIndex</span><span class="p">].</span><span class="n">DataPropertyName</span>
</span><span class='line'>              <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>BindProperty</code> function resolves the data property name and provides the actual value to be displayed in the grid cell by using reflection and (if required) recursion. Two arguments are passed to the <code>BindProperty</code> method: the class property value (which is an instance of a class, in the above example an instance of the <code>Address</code> class) and the <code>DataPropertyName</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="kt">string</span> <span class="nf">BindProperty</span><span class="p">(</span><span class="kt">object</span> <span class="n">property</span><span class="p">,</span> <span class="kt">string</span> <span class="n">propertyName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first thing to check is whether the property name contains the dot character &ndash; although this never happen when called directly from the <code>CellFormatting</code> event handler, since the if statement prevent this, it may happen when <code>BindProperty</code> calls itself recursively.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="kt">string</span> <span class="nf">BindProperty</span><span class="p">(</span><span class="kt">object</span> <span class="n">property</span><span class="p">,</span> <span class="kt">string</span> <span class="n">propertyName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">propertyName</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the property name doesn&rsquo;t contain any dot character, then the <code>propertyName</code> variable contains the name of the property object to be displayed in the grid.</p>

<p>Reflection is used to read the property value, obtained by retrieving the <code>PropertyInfo</code> from the property variable, and then getting the property value by calling the <code>GetValue()</code> method of the <code>PropertyInfo</code> instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="kt">string</span> <span class="nf">BindProperty</span><span class="p">(</span><span class="kt">object</span> <span class="n">property</span><span class="p">,</span> <span class="kt">string</span> <span class="n">propertyName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">string</span> <span class="n">retValue</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">propertyName</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">Type</span> <span class="n">propertyType</span><span class="p">;</span>
</span><span class='line'>    <span class="n">PropertyInfo</span> <span class="n">propertyInfo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">propertyType</span> <span class="p">=</span> <span class="n">property</span><span class="p">.</span><span class="n">GetType</span><span class="p">();</span>
</span><span class='line'>    <span class="n">propertyInfo</span> <span class="p">=</span> <span class="n">propertyType</span><span class="p">.</span><span class="n">GetProperty</span><span class="p">(</span><span class="n">propertyName</span><span class="p">);</span>
</span><span class='line'>    <span class="n">retValue</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="n">GetValue</span><span class="p">(</span><span class="n">property</span><span class="p">,</span> <span class="k">null</span><span class="p">).</span><span class="n">ToString</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This completes the else branch. As for the if branch, it is executed when the property name contains at least one dot character. In this case, still using reflection, the <code>PropertyInfo</code> of the desired property is retrieved, and using recursion, passed to the same <code>BindProperty</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="kt">string</span> <span class="nf">BindProperty</span><span class="p">(</span><span class="kt">object</span> <span class="n">property</span><span class="p">,</span> <span class="kt">string</span> <span class="n">propertyName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">string</span> <span class="n">retValue</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">propertyName</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">PropertyInfo</span><span class="p">[]</span> <span class="n">arrayProperties</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">leftPropertyName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">leftPropertyName</span> <span class="p">=</span> <span class="n">propertyName</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">propertyName</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">arrayProperties</span> <span class="p">=</span> <span class="n">property</span><span class="p">.</span><span class="n">GetType</span><span class="p">().</span><span class="n">GetProperties</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="n">PropertyInfo</span> <span class="n">propertyInfo</span> <span class="k">in</span> <span class="n">arrayProperties</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">propertyInfo</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="n">leftPropertyName</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="n">retValue</span> <span class="p">=</span> <span class="n">BindProperty</span><span class="p">(</span>
</span><span class='line'>          <span class="n">propertyInfo</span><span class="p">.</span><span class="n">GetValue</span><span class="p">(</span><span class="n">property</span><span class="p">,</span> <span class="k">null</span><span class="p">),</span>
</span><span class='line'>          <span class="n">propertyName</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="n">propertyName</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">)</span> <span class="p">+</span> <span class="m">1</span><span class="p">));</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">Type</span> <span class="n">propertyType</span><span class="p">;</span>
</span><span class='line'>    <span class="n">PropertyInfo</span> <span class="n">propertyInfo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">propertyType</span> <span class="p">=</span> <span class="n">property</span><span class="p">.</span><span class="n">GetType</span><span class="p">();</span>
</span><span class='line'>    <span class="n">propertyInfo</span> <span class="p">=</span> <span class="n">propertyType</span><span class="p">.</span><span class="n">GetProperty</span><span class="p">(</span><span class="n">propertyName</span><span class="p">);</span>
</span><span class='line'>    <span class="n">retValue</span> <span class="p">=</span> <span class="n">propertyInfo</span><span class="p">.</span><span class="n">GetValue</span><span class="p">(</span><span class="n">property</span><span class="p">,</span> <span class="k">null</span><span class="p">).</span><span class="n">ToString</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">retValue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>leftPropertyName</code> variable holds the name of the leftmost property, for instance if <code>propertyName</code> is <code>Address.Street</code>, it is filled in with <code>Address</code>. By looping through the array of <code>PropertyInfo</code> of the property object, the <code>PropertyInfo</code> instance of the <code>leftPropertyName</code> property is retrieved. Then, <code>BindProperty</code> is called again, passing the instance of the <code>leftPropertyName</code> property and the right part of <code>propertyName</code> (for instance, in <code>Address.Street</code> the provided property name is <code>Street</code>).</p>

<p>Souce code available on github:
<a href="https://github.com/jeden/DataGridViewSample">DataGridViewSample</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Single Sign on Across Multiple ASP.NET Applications]]></title>
    <link href="http://www.developer-corner.com/2006/09/aspnet-single-sign-on"/>
    <updated>2006-10-01T05:42:00+02:00</updated>
    <id>http://www.developer-corner.com/2006/09/aspnet-single-sign-on</id>
    <content type="html"><![CDATA[<p><strong>Single Sign On</strong> (SSO) is a term used to indicate when a pool of applications need a centralized authentication, so that users log in once and access to any application.</p>

<p>Implementing a single sign on is pretty simple, and can be done by configuring the applications using the web.config file.</p>

<!-- more -->


<h3>Single Sign On</h3>

<p>A default configuration for forms authentication is defined as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;system.web&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>    <span class="nt">&lt;authentication</span> <span class="na">mode=</span><span class="s">&quot;Forms&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;forms</span> <span class="na">name=</span><span class="s">&quot;.cookiename&quot;</span>
</span><span class='line'>             <span class="na">loginUrl=</span><span class="s">&quot;~/Login.aspx&quot;</span>
</span><span class='line'>             <span class="na">timeout=</span><span class="s">&quot;30&quot;</span>
</span><span class='line'>             <span class="na">path=</span><span class="s">&quot;/&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/authentication&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>  <span class="nt">&lt;/system.web&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <code>.cookiename</code>, by default, is <code>.ASPXFORMSAUTH</code>.</p>

<p>In order for authentication data to be recognized across multiple applications, each application must be configured to use the same values for cookie name, protection and path attributes.</p>

<p>But this isn&rsquo;t enough &ndash; in fact, applications must also have the same machine key values (read the <em>Machine Key</em> paragraph at the end of this article for more info about the <code>machineKey</code> element). This data are used to encrypt the
forms authentication cookie, as mentioned in the <em>Forms Authentication</em> paragraph at the end of this article.</p>

<p>Below a sample <code>web.config</code> excerpt which must be added to each application we want single sign on enabled. In this sample, the <code>validationKey</code> and <code>encryptionKey</code> attributes must be replaced with unique values you have to generate for your own application pool.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;system.web&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>    <span class="nt">&lt;authentication</span> <span class="na">mode=</span><span class="s">&quot;Forms&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;forms</span> <span class="na">name=</span><span class="s">&quot;.cookiename&quot;</span>
</span><span class='line'>             <span class="na">loginUrl=</span><span class="s">&quot;~/Login.aspx&quot;</span>
</span><span class='line'>             <span class="na">timeout=</span><span class="s">&quot;30&quot;</span>
</span><span class='line'>             <span class="na">path=</span><span class="s">&quot;/&quot;</span>
</span><span class='line'>      <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/authentication&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>    <span class="nt">&lt;machineKey</span>
</span><span class='line'>       <span class="na">validationKey=</span>
</span><span class='line'>         <span class="s">&quot;F9D1A2D3E1D3E2F7B3D9F90FF3965ABDAC304902&quot;</span>
</span><span class='line'>      <span class="na">encryptionKey=</span>
</span><span class='line'>         <span class="s">&quot;F9D1A2D3E1D3E2F7B3D9F90FF3965ABDAC304902F8D923AC&quot;</span>
</span><span class='line'>      <span class="na">validation=</span><span class="s">&quot;SHA1&quot;</span>
</span><span class='line'>    <span class="nt">/&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>  <span class="nt">&lt;/system.web&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Second and third level domains</h3>

<p>If the cooperating applications are installed under the same 2nd and 3rd level domain, but on different virtual folders, then no additional code is required.</p>

<p>If applications are installed on different second level domains
(<code>www.domain1.com</code> and <code>www.domain2.com</code>), the SSO method described so far won&rsquo;t work, since cookies cannot be read by applications having different second level domains.</p>

<p>For example, if application A in <code>domain1.com</code> issues a cookie, the cookie may be read by A itself and any application hosted under <code>www.domain1.com</code>, plus any other 3rd level domain (<code>test.domain1.com</code>, <code>beta.domain1.com</code>, and so forth).</p>

<p>Application B in <code>domain2.com</code> isn&rsquo;t able to read the cookie, since it is hosted under a different second level domain.</p>

<p>If cooperating applications are installed on different third level domains, then we need to add some code in order to make SSO work. The code simply has to add the domain name to the authentication cookie, as outlined below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">protected</span> <span class="k">void</span> <span class="nf">Login</span> <span class="p">(</span><span class="kt">string</span> <span class="n">strUserName</span><span class="p">,</span> <span class="p">...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">System</span><span class="p">.</span><span class="n">Web</span><span class="p">.</span><span class="n">HttpCookie</span> <span class="n">cookie</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cookie</span> <span class="p">=</span> <span class="n">FormsAuthentication</span><span class="p">.</span><span class="n">GetAuthCookie</span><span class="p">(</span><span class="n">strUserName</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cookie</span><span class="p">.</span><span class="n">Domain</span> <span class="p">=</span> <span class="s">&quot;domain1.com&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cookie</span><span class="p">.</span><span class="n">Expires</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">AddDays</span> <span class="p">(-</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Response</span><span class="p">.</span><span class="n">AppendCookie</span> <span class="p">(</span><span class="n">cookie</span><span class="p">);</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Cookie Expiration</h3>

<p>If different applications set different cookie expirations, the actual expiration value is the one set by the application which issued it. So if application A is configured to set an expiration of 1 hour and application B 2 hours, and the user signs in using application B, then the cookie expiration is set to 2 hours.</p>

<h3>Logging out</h3>

<p>Usually, in order to log out a user, a call to the <code>Authentication.SignOut()</code> method is used &ndash; this isn&rsquo;t enough when using SSO.</p>

<p>In order to perform a single sign out, the quickest way is to set the cookie expiration to a past date &ndash; this ensures that the cookie won&rsquo;t be used by any application for authentication.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">protected</span> <span class="k">void</span> <span class="nf">Logout</span> <span class="p">(</span><span class="kt">string</span> <span class="n">strUserName</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">System</span><span class="p">.</span><span class="n">Web</span><span class="p">.</span><span class="n">HttpCookie</span> <span class="n">cookie</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cookie</span> <span class="p">=</span> <span class="n">FormsAuthentication</span><span class="p">.</span><span class="n">GetAuthCookie</span><span class="p">(</span><span class="n">strUserName</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cookie</span><span class="p">.</span><span class="n">Domain</span> <span class="p">=</span> <span class="s">&quot;domain1.com&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cookie</span><span class="p">.</span><span class="n">Expires</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">AddDays</span> <span class="p">(-</span><span class="m">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Response</span><span class="p">.</span><span class="n">AppendCookie</span> <span class="p">(</span><span class="n">cookie</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Integrating Web Applications</h3>

<p>What said so far is valid if applications use the same database to store user profiles. But what if 2 applications use each one their own database?</p>

<p>In this case, the SSO works, but sooner or later one of the applications will throw exceptions due to missing data in its database.</p>

<p>If a user registers in application A, once he signs in he can access to application B &ndash; but he never registered in application B, so application B doesn&rsquo;t have this user profile in its database.</p>

<p>This is the case when, for example, we have to integrate 2 existing applications, which already have their own authentication and registration implemented.</p>

<p>To solve this problem, we have 2 choices:</p>

<ul>
<li>modify both application in order to use a single authentication and registration process, and having a shared user profile repository</li>
<li>choose one application as the master application, and remove the authentication and registration process from the other application (the slave application)</li>
</ul>


<p>We&rsquo;ll focus on the second solution.</p>

<p>This method requires that the database used by slave applications is accessible by the master application. This can be achieved by either:</p>

<ul>
<li>Creating a single database which holds both application databases. In this case it would be good to use different prefixes for database entities to avoid naming conflicts &ndash; this could happen if both databases have a <code>Users</code> table. If we choose <code>mst</code> and <code>slv</code> as prefixes, we should rename the <code>Users</code> table to <code>mst_Users</code> for the master database and <code>slv_Users</code> for the slave database. This requires that we modify the source code and stored procedures.</li>
<li>Using 2 different databases, but the master application must be able to access to the slave&rsquo;s database.</li>
</ul>


<p>Authentication should be performed in the following way:</p>

<ul>
<li>The user accesses to the master application, and signs in</li>
<li>The master application verifies the user&rsquo;s credentials</li>
<li>The master application verifies whether the logged user is defined in the slave database &ndash; if not, accesses to the slave&rsquo;s database and creates the new user</li>
<li>The master application calls (if existing) a slave&rsquo;s stored procedure which performs post-authentication processing (such as setting a &ldquo;logged in&rdquo; field, inserting a new row in a history table, and so on)</li>
<li>The master application generates the SSO cookie</li>
</ul>


<p>User profile creation on the slave database requires that:</p>

<ul>
<li>the master application is able to access to the slave&rsquo;s database</li>
<li>the slave&rsquo;s database exposes a stored procedure which handles user registration (we may need to write it by ourselves)</li>
</ul>


<p>The second requirement isn&rsquo;t mandatory, since it could also be achieved by using inline SQL &ndash; but I usually prefer the stored procedure solution.</p>

<h3>Final touch</h3>

<p>There would be a few final things to do on the slave application:</p>

<ul>
<li>Removal of all login links</li>
<li>Replacement of logout links with a &ldquo;Back to the Master application&rdquo; link</li>
<li>Replacement of all &ldquo;User&rsquo;s profile&rdquo; links to point to the master application user&rsquo;s profile page</li>
</ul>


<p>These steps ensure that navigation is consistent with integration &ndash; we&rsquo;re supposing that all user&rsquo;s info (credentials, profile, user preferences) are handled by the master application, so we need to modify the slave application accordingly. It is responsibility of the master application to update the user profile in the slave application.</p>

<h3>What if different cookies are used?</h3>

<p>There may be cases where we want to keep authentication cookies separated from master and slaves applications. In this case we can&rsquo;t share the authentication cookie among cooperating applications.</p>

<p>The solution is to create an authentication cookie for the slave application from within the master application.</p>

<p>The code below creates an authentication cookie from the slave application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">FormsAuthenticationTicket</span> <span class="n">ticket</span><span class="p">;</span>
</span><span class='line'><span class="n">HttpCookie</span> <span class="n">cookie</span><span class="p">;</span>
</span><span class='line'><span class="kt">string</span> <span class="n">cookiestr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ticket</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FormsAuthenticationTicket</span><span class="p">(</span>
</span><span class='line'>                       <span class="m">1</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">userId</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">AddYears</span> <span class="p">(</span><span class="m">120</span><span class="p">),</span>
</span><span class='line'>                       <span class="k">true</span><span class="p">,</span>
</span><span class='line'>                       <span class="s">&quot;User Data&quot;</span><span class="p">,</span>
</span><span class='line'>                       <span class="s">&quot;cookie_path&quot;</span>
</span><span class='line'>           <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookiestr</span> <span class="p">=</span> <span class="n">FormsAuthentication</span><span class="p">.</span><span class="n">Encrypt</span><span class="p">(</span><span class="n">ticket</span><span class="p">);</span>
</span><span class='line'><span class="n">cookie</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HttpCookie</span><span class="p">(</span><span class="s">&quot;cookie_name&quot;</span><span class="p">,</span> <span class="n">cookiestr</span><span class="p">);</span>
</span><span class='line'><span class="n">cookie</span><span class="p">.</span><span class="n">Expires</span> <span class="p">=</span> <span class="n">ticket</span><span class="p">.</span><span class="n">Expiration</span><span class="p">;</span>
</span><span class='line'><span class="n">cookie</span><span class="p">.</span><span class="n">Path</span> <span class="p">=</span> <span class="s">&quot;cookie_path&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Response</span><span class="p">.</span><span class="n">Cookies</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">cookie</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Forms Authentication Ticket</h3>

<p>The <code>FormsAuthenticationTicket</code> class is used to create and read the values of a forms authentication cookie identifying an authenticated user.</p>

<p>Forms authentication tickets must be encrypted using the <code>FormsAuthentication.Encrypt()</code> method before being issued as a cookie.</p>

<p>More information about the  <code>FormsAuthenticationTicket</code> class can be found <a href="http://msdn2.microsoft.com/en-%0Aus/library/system.web.security.formsauthenticationticket.aspx">here</a>.</p>

<p>The <code>FormsAuthenticationTicket</code>, as its name says, is a class used to generate authentication tickets (see the <em>Form Authentication</em> paragraph below). The code sample above shows that the following parameters are used to create the ticket:</p>

<ul>
<li>ticket version number</li>
<li>user id</li>
<li>date and time at which the ticket was generated</li>
<li>ticket expiration</li>
<li>whether creating a persistent cookie or limited to the current browser&rsquo;s session</li>
<li>user specific data to be stored in the ticket (for example, this could be a user class/role)</li>
<li>cookie path</li>
</ul>


<h1>Machine Key</h1>

<p>The <code>machineKey</code> element of the <code>web.config</code> file is used to specify keys for encryption and decryption of forms authentication cookies and view state data, and also when dealing with out of process session state.</p>

<p>The default configuration uses auto generated decryption key and validation key, and SHA1 encryption type. Using the default configuration, different web applications have different decryption and validation key, since they are randomly generated. To force 2 applications to use the same keys, they must be explicitly defined in the web.config file.</p>

<p>A complete description of the machineKey element is available
<a href="http://msdn2.microsoft.com/en-us/library/w8h3skw9.aspx">here</a></p>

<h1>Form Authentication</h1>

<p>Forms Authentication uses an authentication ticket stored in either a cookie or embedded in the url.</p>

<p>When used in cookie mode, the cookie contains authentication data, encrypted so that data can be read by the application who has created the cookie.</p>

<p>Cookies are associated to 2nd level domains (example.com), and can be accessed from any 3rd level domain (www.example.com, test.example.com, and so on).</p>

<h3>References</h3>

<p><a href="http://msdn2.microsoft.com/en-%0Aus/library/w8h3skw9.aspx">MSDN &ndash; machineKey element</a></p>

<p><a href="http://msdn2.microsoft.com/en-%0Aus/library/system.web.security.formsauthenticationticket.aspx">MSDN &ndash; FormsAuthenticationTicket class</a></p>
]]></content>
  </entry>
  
</feed>
